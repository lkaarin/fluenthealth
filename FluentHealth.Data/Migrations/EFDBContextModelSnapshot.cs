// <auto-generated />
using System;
using FluentHealth.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FluentHealth.Data.Migrations
{
    [DbContext(typeof(EFDBContext))]
    partial class EFDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FluentHealth.Data.Models.Attachment", b =>
                {
                    b.Property<short>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("DiseaseId");

                    b.Property<string>("FileName");

                    b.HasKey("AttachmentId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("FluentHealth.Data.Models.Diagnosis", b =>
                {
                    b.Property<short>("DiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("DiseaseId");

                    b.Property<string>("Name");

                    b.HasKey("DiagnosisId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("FluentHealth.Data.Models.Disease", b =>
                {
                    b.Property<short>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate");

                    b.Property<short?>("PersonId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("DiseaseId");

                    b.HasIndex("PersonId");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("FluentHealth.Data.Models.DiseaseSymptom", b =>
                {
                    b.Property<short>("DiseaseId");

                    b.Property<short>("SymptomId");

                    b.HasKey("DiseaseId", "SymptomId");

                    b.HasIndex("SymptomId");

                    b.ToTable("DiseaseSymptom");
                });

            modelBuilder.Entity("FluentHealth.Data.Models.DoctorVisit", b =>
                {
                    b.Property<short>("DoctorVisitId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("DiseaseId");

                    b.Property<string>("DoctorName");

                    b.Property<DateTime>("VisitDate");

                    b.HasKey("DoctorVisitId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("FluentHealth.Data.Models.Drug", b =>
                {
                    b.Property<short>("DrugId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("DrugId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("FluentHealth.Data.Models.DrugHistory", b =>
                {
                    b.Property<int>("DrugHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("DiseaseId");

                    b.Property<short?>("DrugId");

                    b.Property<float?>("Price");

                    b.Property<bool>("Used");

                    b.HasKey("DrugHistoryId");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("DrugId");

                    b.ToTable("DrugHistory");
                });

            modelBuilder.Entity("FluentHealth.Data.Models.Person", b =>
                {
                    b.Property<short>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("FirstName");

                    b.Property<byte>("Gender");

                    b.Property<string>("LastName");

                    b.Property<short?>("PersonStyleId");

                    b.HasKey("PersonId");

                    b.HasIndex("PersonStyleId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("FluentHealth.Data.Models.PersonStyle", b =>
                {
                    b.Property<short>("PersonStyleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorCode");

                    b.HasKey("PersonStyleId");

                    b.ToTable("PersonStyle");
                });

            modelBuilder.Entity("FluentHealth.Data.Models.Symptom", b =>
                {
                    b.Property<short>("SymptomId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("SymptomId");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("FluentHealth.Data.Models.Attachment", b =>
                {
                    b.HasOne("FluentHealth.Data.Models.Disease")
                        .WithMany("Attachments")
                        .HasForeignKey("DiseaseId");
                });

            modelBuilder.Entity("FluentHealth.Data.Models.Diagnosis", b =>
                {
                    b.HasOne("FluentHealth.Data.Models.Disease")
                        .WithMany("Diagnoses")
                        .HasForeignKey("DiseaseId");
                });

            modelBuilder.Entity("FluentHealth.Data.Models.Disease", b =>
                {
                    b.HasOne("FluentHealth.Data.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("FluentHealth.Data.Models.DiseaseSymptom", b =>
                {
                    b.HasOne("FluentHealth.Data.Models.Disease", "Disease")
                        .WithMany("Symptoms")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FluentHealth.Data.Models.Symptom", "Symptom")
                        .WithMany("Diseases")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FluentHealth.Data.Models.DoctorVisit", b =>
                {
                    b.HasOne("FluentHealth.Data.Models.Disease", "Disease")
                        .WithMany("Visits")
                        .HasForeignKey("DiseaseId");
                });

            modelBuilder.Entity("FluentHealth.Data.Models.DrugHistory", b =>
                {
                    b.HasOne("FluentHealth.Data.Models.Disease")
                        .WithMany("Drugs")
                        .HasForeignKey("DiseaseId");

                    b.HasOne("FluentHealth.Data.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId");
                });

            modelBuilder.Entity("FluentHealth.Data.Models.Person", b =>
                {
                    b.HasOne("FluentHealth.Data.Models.PersonStyle", "PersonStyle")
                        .WithMany()
                        .HasForeignKey("PersonStyleId");
                });
#pragma warning restore 612, 618
        }
    }
}
